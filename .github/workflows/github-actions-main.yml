name: Joplin Continuous Integration
on: [workflow_dispatch]
jobs:
  Main:
    # We always process server or desktop release tags, because they also publish the release
    if: github.repository == 'dpjl/joplin'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Do not use unbuntu-latest because it causes `The operation was canceled` failures:
        # https://github.com/actions/runner-images/issues/6709
        os: [ubuntu-20.04]
    steps:

      - name: Disable TCP/UDP offload on Linux
        if: runner.os == 'Linux'
        run: sudo ethtool -K eth0 tx off rx off

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update || true
          sudo apt-get install -y gettext
          sudo apt-get install -y libsecret-1-dev
          sudo apt-get install -y translate-toolkit
          sudo apt-get install -y rsync
          # Provides a virtual display on Linux. Used for Playwright integration
          # testing.
          sudo apt-get install -y xvfb

      - name: Install Docker Engine
        # if: runner.os == 'Linux' && startsWith(github.ref, 'refs/tags/server-v')
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y apt-transport-https
          sudo apt-get install -y ca-certificates
          sudo apt-get install -y curl
          sudo apt-get install -y gnupg
          sudo apt-get install -y lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo \
              "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update || true
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - uses: actions/checkout@v4
      - uses: olegtarasov/get-tag@v2.1
      - uses: actions/setup-node@v2
        with:
          # We need to pin the version to 18.15, because 18.16+ fails with this error:
          # https://github.com/facebook/react-native/issues/36440
          node-version: '18.15.0'
          cache: 'yarn'

      - name: Install Yarn
        run: |
          # https://yarnpkg.com/getting-started/install
          corepack enable
    
      # macos-latest ships with Python 3.12 by default, but this removes a
      # utility that's used by electron-builder (distutils) so we need to pin
      # Python to an earlier version.
      # Fixes error `ModuleNotFoundError: No module named 'distutils'`
      # Ref: https://github.com/nodejs/node-gyp/issues/2869
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

    
      - name: Build and publish Linux desktop app
        if: runner.os == 'Linux'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          IS_CONTINUOUS_INTEGRATION: 1
          BUILD_SEQUENCIAL: 1
        # To ensure that the operations stop on failure, all commands
        # should be on one line with "&&" in between.
        run: |
          yarn install && cd packages/app-desktop && yarn run dist
